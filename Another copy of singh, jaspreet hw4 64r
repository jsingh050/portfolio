{"cells":[{"cell_type":"markdown","metadata":{"id":"Vl8Q3pb5FCic"},"source":["ECE 2195 HW4 Problem 2"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":534},"id":"sNLJQak1FCid","executionInfo":{"status":"ok","timestamp":1708657115972,"user_tz":300,"elapsed":6501,"user":{"displayName":"Jessi Singh","userId":"14059301024872086790"}},"outputId":"f20a0d7e-fa60-47e3-cd65-ab91bf351fae"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11490434/11490434 [==============================] - 0s 0us/step\n","x_train shape: (60000, 784)\n","Number of images in x_train 60000\n","Number of images in x_test 10000\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x78a100e0bd60>"]},"metadata":{},"execution_count":1},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Problem 2: MNIST Classification using a Multi Layer Perceptron\n","\n","# Import numpy, Tensorflow and Keras to build and run a custom ANN\n","import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","# Get the MNIST dataset from Keras for training and testing; x - input image, y - output label\n","(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n","\n","# Reshape the input data to fit the Keras ANN model - (Nsamples, 28, 28) is converted to (Nsamples, 28*28)\n","x_train = x_train.reshape(x_train.shape[0], x_train.shape[1]*x_train.shape[2])\n","x_test = x_test.reshape(x_test.shape[0], x_test.shape[1]*x_test.shape[2])\n","print('x_train shape:', x_train.shape)\n","print('Number of images in x_train', x_train.shape[0])\n","print('Number of images in x_test', x_test.shape[0])\n","\n","# Check sample image - change index to try different inputs\n","image_index = 1111\n","plt.imshow(x_test[image_index].reshape(28, 28),cmap='Greys')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nomEZVI8FCie","executionInfo":{"status":"ok","timestamp":1708657116208,"user_tz":300,"elapsed":238,"user":{"displayName":"Jessi Singh","userId":"14059301024872086790"}},"outputId":"e4466b8e-a403-4faa-fff8-01e869b1b5c3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 64)                50240     \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                650       \n","                                                                 \n","=================================================================\n","Total params: 50890 (198.79 KB)\n","Trainable params: 50890 (198.79 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}],"source":["# 32 and sigmoid: Importing the required Keras modules containing model and layers\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D, Activation\n","\n","# Set activation layer - sigmoid or relu\n","act_layer = 'relu'\n","\n","# Creating a Sequential Model and add the layers - hidden and output\n","model = Sequential()\n","\n","# Add 1st hidden layer\n","model.add(Dense(64, input_dim=784, activation=act_layer))\n","# Add 2nd hidden layer\n","# model.add(Dense(128, activation=act_layer))\n","\n","# randomly drop few connections - to reduce memory and may improve accuracy\n","# model.add(Dropout(0.2))\n","\n","# Output layer - 10 nodes for 10 output lables 0,1,...,9\n","model.add(Dense(10, activation=tf.nn.softmax))\n","\n","# Print summary of model built - look at number of parameters needed; more params -> more resources\n","model.summary()"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n7gQpBdUFCie","outputId":"451d4bd2-b03c-40ae-d77d-f71f3b6ef7b7","executionInfo":{"status":"ok","timestamp":1708657199650,"user_tz":300,"elapsed":83443,"user":{"displayName":"Jessi Singh","userId":"14059301024872086790"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","1875/1875 [==============================] - 11s 5ms/step - loss: 2.2500 - accuracy: 0.7967\n","Epoch 2/10\n","1875/1875 [==============================] - 10s 5ms/step - loss: 0.5162 - accuracy: 0.8763\n","Epoch 3/10\n","1875/1875 [==============================] - 5s 2ms/step - loss: 0.3729 - accuracy: 0.9091\n","Epoch 4/10\n","1875/1875 [==============================] - 5s 3ms/step - loss: 0.2968 - accuracy: 0.9251\n","Epoch 5/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.2555 - accuracy: 0.9356\n","Epoch 6/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.2376 - accuracy: 0.9406\n","Epoch 7/10\n","1875/1875 [==============================] - 5s 3ms/step - loss: 0.2246 - accuracy: 0.9435\n","Epoch 8/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.2128 - accuracy: 0.9475\n","Epoch 9/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.2013 - accuracy: 0.9501\n","Epoch 10/10\n","1875/1875 [==============================] - 5s 3ms/step - loss: 0.1967 - accuracy: 0.9522\n"]}],"source":["# Compile the ANN model with specific optimizer, loss function and performance metric\n","# optimizer = sgd for stochastic gradient descent, OR adam -\n","model.compile(optimizer='adam',\n","              loss='sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","# Train the ANN model iteratively for N epochs\n","n_epochs = 10\n","history = model.fit(x=x_train,y=y_train, epochs=n_epochs)"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":552},"id":"0JYifHLcFCie","executionInfo":{"status":"ok","timestamp":1708657200751,"user_tz":300,"elapsed":1119,"user":{"displayName":"Jessi Singh","userId":"14059301024872086790"}},"outputId":"feabeaac-7f96-490b-baf0-e74a421ff5e1"},"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 2ms/step - loss: 0.2790 - accuracy: 0.9488\n","Test accuracy: 0.9488000273704529\n","1/1 [==============================] - 0s 90ms/step\n","\n","Prediction: 4\n","\n","Actual input\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Evaluate the ANN model with the test samples\n","score = model.evaluate(x_test, y_test)\n","print('Test accuracy:', score[1])\n","\n","# Check the ANN with an example\n","image_index = 1111\n","plt.imshow(x_test[image_index].reshape(28, 28),cmap='Greys')\n","pred = model.predict(x_test[image_index].reshape(1,28*28))\n","print('\\nPrediction:', pred.argmax())\n","print('\\nActual input')"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"ujjbTfWxFCie","colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"status":"ok","timestamp":1708657201143,"user_tz":300,"elapsed":395,"user":{"displayName":"Jessi Singh","userId":"14059301024872086790"}},"outputId":"dfb8bec1-d0bf-40c5-ccef-b895193ea248"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x78a0f8d53d90>]"]},"metadata":{},"execution_count":5},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Plot the Training Loss - loss should decrease and approach 0 with number of epochs\n","x = list(range(1, n_epochs+1))\n","ty = history.history['loss']\n","plt.title('Training Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Categorical Cross-entropy Loss')\n","plt.plot(x,ty)"]},{"cell_type":"markdown","metadata":{"id":"IN7AnRwuFCie"},"source":["ECE 2195 HW4 Problem 3"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"mbP2hB67FCie","executionInfo":{"status":"ok","timestamp":1708657201143,"user_tz":300,"elapsed":6,"user":{"displayName":"Jessi Singh","userId":"14059301024872086790"}}},"outputs":[],"source":["Vthresh = 1\n","Cmem = 1e-12 #1pF\n","Erev = 2.0\n","lrn_rate = 0.2\n","Gleak = 1e-8\n","Eleak = 0.0\n","I0 = 1e-6 #\n","I1 = 1e-6\n","tau_decay = 10\n","tau_learn = 100\n","dt = 1e-6 #1us step size\n","\n","# Calculate input synaptic current for neuron N2 only\n","# for N0 and N1 Isyn is external input current, for N2 Isyn is sum of synaptic input currents\n","# Gsyn is the weight change of the synapse (W0 or W1)\n","def calc_Isyn(Isyn, Gsyn, tspike_pre, tnow, tau_decay, Erev, Vmem):\n","    Isyn[tnow+1] += Gsyn*np.exp((tspike_pre-tnow)/tau_decay)*(Erev-Vmem[tnow])\n","    return Isyn\n","\n","# Calcuate membrane voltage for neurons N0, N1 and N2 -\n","# for N0 and N1 Isyn is external input current, for N2 Isyn is sum of synaptic input currents\n","def calc_Vmem(Vm_init, Isyn, Cmem, dt):\n","    return Vm_init + np.sum(Isyn, axis=0)*dt/Cmem + Gleak*(Eleak-Vm_init)*dt/Cmem\n","\n","# STDP Weight update rule - delta(Gsyn) is the weight change of the synapse (W0 or W1)\n","def train_STDP(lrn_rate, tpre, tpost, tau_learn):\n","    return lrn_rate*np.sign(tpost-tpre)*np.exp(np.sign(tpre-tpost)*(tpost-tpre)/tau_learn)\n","\n","# Your tasks\n","# 1. Build a simple neural network as shown in HW4 and initialize W0 and W1 (Gsyn0 and Gsyn1) correctly.\n","# 2. Generate input currents I0 and I1. Assume I0 and I1 to be atleast 1uA amplitude and applied for 1ms.\n","# 3. Compute Isyn and Vmem using the predefined functions\n","# 4. Use STDP rule to calculate change in weights\n","# 5. Demonstrate associative learning as described in problem 3, by tuning I0, I1, W0 and W1."]},{"cell_type":"code","execution_count":6,"metadata":{"id":"ZPRGp4UmFCie","executionInfo":{"status":"ok","timestamp":1708657201143,"user_tz":300,"elapsed":4,"user":{"displayName":"Jessi Singh","userId":"14059301024872086790"}}},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"colab":{"provenance":[{"file_id":"1ucmMsZybauueGz3Ml1LSpxltqYKI5N2Q","timestamp":1708656936271},{"file_id":"15dJjoWw_uLh5w0ZYJlszlUYfn-_lUfiS","timestamp":1708656016560}]}},"nbformat":4,"nbformat_minor":0}